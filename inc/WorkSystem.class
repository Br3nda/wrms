<?php
/////////////////////////////////////////////////////////////
//   C L A S S   F O R   W O R K S Y S T E M
/////////////////////////////////////////////////////////////
class WorkSystem {
  var $system_code;
  var $new_record;
  var $chtype;

  function WorkSystem( $id ) {
    global $session;
    if ( !$session->logged_in ) return false;
    $this->new_record = true;

    $id = str_replace("'","",str_replace("\\","",trim("$id")));
    if ( $id != "" ) {
      // Try and load it from file
      $this->ReadWorkSystem($id);
    }
    if ( $this->system_code == "" && ($session->AllowedTo('Admin') || $session->AllowedTo('Support')) ) {
      $session->Log("DBG: Initialising new work_system values");
      $GLOBALS['edit'] = 1;
      $this->new_record = true;

      // Assign some template-based defaults
      if ( isset($_GET['user_template']) ) {
        // templates aren't done yet :-(
      }
    }
    elseif ( $this->system_code == "" ) {
      return false;
    }
  }

  /////////////////////////////////////////////////////////////
  // ReadWorkSystem - Read the work_system
  /////////////////////////////////////////////////////////////
  function ReadWorkSystem( $id )  {
    global $session, $client_messages, $debuggroups;

    // Try and load it from file
    $sql = "SELECT work_system.* ";
    $sql .= " FROM work_system ";
    $sql .= " WHERE work_system.system_code = '$id'";

    if ( $qry = new PgQuery($sql) ) {
      if ( $qry->Exec("newWorkSystem")
              && $qry->rows == 1 && $row = $qry->Fetch() ) {

        $this->system_code = $row->system_code;
        if ( !$this->AllowedTo('view') ) {
          unset($GLOBALS['edit']);
          $this->new_record = true;
          $this->system_code = "";
          $client_messages[] = "You may not view this system, or create new systems.";
          return;
        }
        $this->new_record = false;
        while( list($k,$v) = each($row) ) {
          if ( isset($debuggroups['WorkSystem']) && $debuggroups['WorkSystem'] ) {
            $session->Log( "DBG: \$this->{'%-25.25s = %s", $sysabbr, "$k'}", $v );
          }
          $this->{$k} = $v;
        }
      }
      else {
        if ( !$this->AllowedTo('create') ) {
          unset($GLOBALS['edit']);
          $client_messages[] = "You may not view this system, or create new systems.";
        }
        $this->new_record = true;
      }
    }
  }

  /////////////////////////////////////////////////////////////
  // AllowedTo - Can the user do that to this work_system
  /////////////////////////////////////////////////////////////
  function AllowedTo( $action ) {
    global $session, $debuggroups;

    $answer = false;
    if ( $session->AllowedTo('Admin') || $session->AllowedTo('Support') ) {
      $answer = true;  // Of course they can!
    }
    elseif ( $action == 'view' && isset($session->system_roles[$this->system_code]) ) {
      $answer = true;
    }
    if ( isset($debuggroups['WorkSystem']) && $debuggroups['WorkSystem'] ) {
      $roles = "";
      foreach( $session->system_roles AS $k => $v ) { $roles .= ($roles == "" ? "":",") . "$k=$v"; }
      $session->Log("WS::AllowedTo: action '%s' to %s, System:%s, SysRole:%s, Roles:%s - result is: %d",
                        $action, $session->username, $this->system_code, $session->system_roles[$this->system_code],
                        $roles, $answer );
    }
    return $answer;
  }

  /////////////////////////////////////////////////////////////
  // Render - Return HTML to show the W/R
  //   A separate function is called for each logical area
  //   on the W/R.
  /////////////////////////////////////////////////////////////
  function Render( ) {

    if ( ! $this->AllowedTo('view') ) {
      return;
    }

    $ef = new EntryForm( $REQUEST_URI, $this, $GLOBALS['edit'] );
    $ef->NoHelp();  // Prefer this style, for the moment

    $html = "";
    if ( $ef->editmode ) {
      $html .= $ef->StartForm( array( /*"onsubmit" => "return CheckWorkSystemForm();" */ ) );
//      if ( $this->org_code > 0 ) $html .= $ef->HiddenField( "org_code", $this->org_code );
    }

    $html .= "<table width=\"100%\" class=\"data\" cellspacing=\"0\" cellpadding=\"0\">\n";

    $html .= $this->RenderDetails($ef);
    $html .= $this->RenderOrganisations($ef);

    $html .= "</table>\n";
    if ( $ef->editmode ) {
      $html .= '<div id="footer">';
      $html .= $ef->SubmitButton( "submit", ($this->new_record ? "Create" : "Update") );
      $html .= '</div>';
      $html .= $ef->EndForm();
    }

    return $html;
  }


   function RenderDetails( $ef ) {
     global $session;
     $html = "";
     $html .= $ef->BreakLine("System Details");

     $html .= $ef->DataEntryLine( "System Code", "%s", "text", "system_code",
               array( "size" => 10, "title" => "The code for the system.") );

     // Name
     $html .= $ef->DataEntryLine( "Description", "%s", "text", "system_desc",
               array( "size" => 70, "title" => "The description of the system.") );

     // Active?
     $html .= $ef->DataEntryLine( "Active?", ($this->active == 't' ? "Active" : "Inactive"), "checkbox", "active",
               array("title" => "Does this work_system have an SLA?") );

     return $html;
   }

   function RenderOrganisations( $ef ) {
     global $session;
     $html = "";
     $sql = "SELECT organisation.*, ";
     $sql .= "exists( SELECT 1 from org_system WHERE org_system.org_code = organisation.org_code AND system_code = ? ) AS applies ";
     if ( $ef->editmode && ($session->AllowedTo('Admin') || $session->AllowedTo('Support')) ) {
       $sql .= "FROM organisation ";
       $sql .= "WHERE active ";
     }
     elseif ( $session->AllowedTo('Admin') || $session->AllowedTo('Support') ) {
       $sql .= "FROM organisation JOIN org_system ON ( organisation.org_code = org_system.org_code ) ";
       $sql .= "WHERE active AND org_system.system_code = ? ";
     }
     else {
       $sql .= "FROM organisation JOIN org_system ON ( organisation.org_code = org_system.org_code ) ";
       $sql .= "WHERE active AND org_system.org_code = $session->org_code ";
       $sql .= "AND org_system.system_code = ? ";
     }
     $sql .= "ORDER BY org_name";

     # Select the records
     $q = new PgQuery($sql, $this->system_code, $this->system_code);
     $column = 0;
     if ( $q && $q->Exec("WS::RndrOrgs") && $q->rows ) {
       $html .= $ef->BreakLine("Active Organisations");
       $html .= '<tr><td colspan="2"><table>'."\n";

       while( $row = $q->Fetch() ) {
         if ( $column % 3 == 0 ) $html .= "<tr>";
         if ( trim($row->org_name) == "" ) $row->org_name = "&lt;&lt;&lt;unknown&gt;&gt;&gt;";
         $html .= "<td width=\"33%\">";
         if ( $ef->editmode  && ($session->AllowedTo('Admin') || $session->AllowedTo('Support')) ) {
           $ef->record->applies[$row->org_code] = "$row->applies";
           $html .= sprintf("<label style=\"color: %s\">", ( "$row->applies" == "t" ? "red" : "black") );
           $html .= $ef->DataEntryField( "", "checkbox", "applies[$row->org_code]",
                 array("title" => "Is this organisation active for this work_system?" ) );
           $html .= " $row->org_name</label>";
         }
         else {
           $html .= "<a href=\"/org.php?org_code=$row->org_code\">$row->org_name</a>";
         }
         $html .= "</td>";
         if ( ++$column % 3 == 0 ) $html .= "</tr>";
       }
     }
     while ( $column % 3 != 0 ) {
       $html .= "<td></td>";
       if ( ++$column % 3 == 0 ) $html .= "</tr>";
     }
     $html .= '</table></td></tr>'."\n";

     return $html;
   }


   function Validate( $ef ) {
     global $session, $client_messages;
     error_log("$system_name: vpw: DBG: Validating work_system");

     if ( isset($_POST) ) {
       if ( ! $this->AllowedTo('update') ) {
         $client_messages[] = "You may not update this system.";
         return;
       }

       $valid = true;
       $_POST['active'] = ( isset($_POST['active']) ? $_POST['active'] : 'f' );

       if ( $_POST['system_code'] == "" ) {
         $client_messages[] = "ERROR: The system code may not be blank.";
         $valid = false;
       }

       if ( trim($_POST['system_desc']) == "" ) {
         $client_messages[] = "ERROR: The system description may not be blank.";
         $valid = false;
       }

       return $valid;
     }

     $client_messages[] = "ERROR: No form data submitted!";
     return false;
   }

   function Write( $ef ) {
     global $client_messages;
     error_log("$system_name: vpw: DBG: Writing work_system form details to database");
     $client_messages[] = "Writing system details to database.";
     $this->chtype = strtolower($_POST['submit']);

     $qry = new PgQuery("BEGIN");              $qry->Exec("Sys::Write");

     $sql = sql_from_post( $this->chtype, "work_system", "WHERE system_code='$this->system_code'");
     $qry = new PgQuery($sql);
     if ( !$qry->Exec("Sys::Write") )       $client_messages[] = "ERROR: $qry->errorstring";
     else if ( "create" == $this->chtype ) {
       $this->system_code = $_POST['system_code'];
       $GLOBALS['system_code'] = $this->system_code;
     }

     $organisations = "";
     foreach( $_POST['applies'] AS $k => $v ) {
       if ( $v ) {
         $organisations .= ( "$organisations" == "" ? "" : ", " );
         $organisations .= "'" . str_replace("'","''",str_replace('\\','', $k)) . "'";
       }
     }
     $sql = "DELETE FROM org_system WHERE system_code = '$this->system_code' AND org_code NOT IN ( $organisations ); ";
     $qry = new PgQuery($sql);
     if ( !$qry->Exec("Sys::Write") ) $client_messages[] = "ERROR: $qry->errorstring";

     $sql = "INSERT INTO org_system (system_code, org_code) ";
     $sql .= "SELECT '$this->system_code' AS system_code, org_code ";
     $sql .= "FROM organisation WHERE org_code IN ( $organisations ) ";
     $sql .= "AND NOT EXISTS( SELECT 1 FROM org_system WHERE system_code = '$this->system_code' ";
     $sql .= "AND org_system.org_code = organisation.org_code); ";
     $qry = new PgQuery($sql);
     if ( !$qry->Exec("Sys::Write") ) $client_messages[] = "$qry->errorstring";

     $qry = new PgQuery("COMMIT; ROLLBACK;");  $qry->Exec("Sys::Write");

     return true;
   }

}
?>
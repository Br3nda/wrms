<?php
/////////////////////////////////////////////////////////////
//   C L A S S   F O R   W O R K   R E Q U E S T S
/////////////////////////////////////////////////////////////
require_once("html-format.php");
require_once("guess-file-type.php");
require_once('class.phpmailer.php');

// Random Joe Functions we use
function simplify_string( $str ) {

  $result = stripslashes($str);

  if ( function_exists('html_entity_decode') ) {
    $result = html_entity_decode($result);
  }
  else {
    // Otherwise try and ensure some consistency the other way...
    if ( ! strpos( $result, '&' ) ) {
      $result = htmlentities($result);
    }
  }

  $result = preg_replace( '/\s+/s', '', $result );

  return $result;
}


class Request {
   var $request_id;         // Which WR is this
   var $new_record;
   var $mail_message_data;
   var $chtype;             // What sort of change is this?
   var $send_an_email;      // Should we notify this change

   function Request( $id = 0 ) {
     global $session, $tmnu, $edit;
     if ( !$session->logged_in ) return false;
     $loaded = false;
     $this->request_id = 0;
     $this->send_an_email = false;
     $this->mail_message_data = array();
     $this->chtype = "none";

     $id = intval("$id");
     if ( $id > 0 ) {
       // Try and load it from file
       $this->ReadRequest($id);
       if ( $this->request_id == 0 ) {
         $edit = false;
       }
     }
     else {
       $this->new_record = true;
       $this->request_id = 0;
       // Assign some defaults because it looks like we're starting a new one
       if ( isset($_GET['wr_template']) ) {
         // Oh goody, we can get some defaults from a saved template :-)
         $loaded = false;  // templates aren't done yet :-(
       }
       if ( ! $loaded ) {
         // Initialise to standard default values
       }
     }
   }

   /////////////////////////////////////////////////////////////
   // ReadRequest - Read the actual request record and assign the fields.
   /////////////////////////////////////////////////////////////
   function ReadRequest( $id ) {
     global $session, $tmnu, $client_messages;

     // Note: careful adjustment of the field order - work_system and request both have 'active' e.g.
     $sql = "SELECT organisation.*, usr.*, work_system.*, request.*, system_usr.role AS system_usr_role ";
     $sql .= ", to_char( request.requested_by_date, 'dd/mm/yyyy' ) AS requested_by_date, to_char( request.agreed_due_date, 'dd/mm/yyyy' ) AS agreed_due_date ";
     $sql .= ", status.lookup_desc AS status_desc";
     $sql .= ", request_type.lookup_desc AS request_type_desc";
     $sql .= ", urgency.lookup_desc AS urgency_desc";
     $sql .= ", sla_response.lookup_desc AS sla_response_desc";
     $sql .= ", importance.lookup_desc AS importance_desc";
     $sql .= ", system_desc, request_sla_code(sla_response_time,sla_response_type) ";
     $sql .= " FROM request LEFT OUTER JOIN usr ON (request.requester_id = usr.user_no)";
     $sql .= " LEFT OUTER JOIN organisation USING( org_code )";
     $sql .= " LEFT OUTER JOIN lookup_code AS status ON status.source_table='request' AND status.source_field='status_code' AND status.lookup_code = request.last_status";
     $sql .= " LEFT OUTER JOIN lookup_code AS request_type ON request_type.source_table='request' AND request_type.source_field='request_type' AND request.request_type = request_type.lookup_code";
     $sql .= " LEFT OUTER JOIN lookup_code AS urgency ON urgency.source_table='request' AND urgency.source_field='urgency' AND int4(urgency.lookup_code)=request.urgency";
     $sql .= " LEFT OUTER JOIN lookup_code AS sla_response ON sla_response.source_table='request' AND sla_response.source_field='sla_response' AND sla_response.lookup_code=request_sla_code(sla_response_time,sla_response_type)";
     $sql .= " LEFT OUTER JOIN lookup_code AS importance ON importance.source_table='request' AND importance.source_field='importance' AND int4(importance.lookup_code)=request.importance";
     $sql .= " LEFT OUTER JOIN work_system USING( system_code )";
     $sql .= " LEFT OUTER JOIN system_usr ON $session->user_no = system_usr.user_no AND request.system_code = system_usr.system_code ";
     $sql .= " WHERE request.request_id = '$id' ";
     // echo "<p>$sql<p>";

     if ( $qry = new PgQuery($sql) ) {
       if ( $qry->Exec("ReadRequest")
                  && $qry->rows == 1 && $row = $qry->Fetch() ) {
         if ( $session->AllowedTo('Admin') || $session->AllowedTo('Support')
                  || $row->org_code == $session->org_code ) {
           $this->new_record = false;
           while( list($k,$v) = each($row) ) {
             if ( isset($debuggroups['Request']) && $debuggroups['Request'] ) {
               error_log( sprintf("%s: DBG: \$this->{'%-25.25s = %s", $sysabbr, "$k'}", $v) );
             }
             $this->{$k} = $v;
           }
           if ( strpos( "ASEC", strtoupper($this->system_usr_role))
                || $this->requester_id == $session->user_no ) {
             $tmnu->AddOption("Edit","/wr.php?edit=1&request_id=$this->request_id","Edit the details for this work request");
           }

           $tmnu->AddOption("Organisation","/org.php?org_code=$this->org_code&request_id=$id","View the details for this organisation");
           $tmnu->AddOption("System","/system.php?system_code=$this->system_code&request_id=$id","View the details for this system");
           $tmnu->AddOption("User","/usr.php?user_no=$this->user_no&request_id=$id","View the details for the requesting user");
         }
         else {
           error_log( sprintf("%s: DBG: User %d cannot access request %d.", $sysabbr, $session->user_no, $id) );
           $client_messages[] = "Request $id is unavailable - do you have the number right?";
           $this->new_record = false;
         }
       }
       else {
         // Request not found that the user can read.
         error_log( sprintf("%s: DBG: User %d cannot access request %d.", $sysabbr, $session->user_no, $id) );
         $client_messages[] = "Request $id is unavailable - do you have the number right?";
         $this->new_record = false;
       }
     }
     else {
       // SQL is broken or something very wierd!
       error_log( sprintf("%s: DBG: Can't create SQL PgQuery for '%s'", $sysabbr, $sql) );
     }
   }


   /////////////////////////////////////////////////////////////
   // AllowedTo - Can the user do that to this request?
   /////////////////////////////////////////////////////////////
   function AllowedTo( $action ) {
     switch( $action ) {
       default:
         error_log("$sysabbr WR::AllowedTo: WARNING: Unrecognised action: '$action'");
     }
     return true;  // Of course they can!
   }

   /////////////////////////////////////////////////////////////
   // Actions - Process the more unusual actions against the W/R
   //   A separate function is called for each action and this
   //   function is really only checking that permissions and
   //   data are appropriate.
   /////////////////////////////////////////////////////////////
   function Actions( ) {
     global $session, $action, $sysabbr, $client_messages;
     switch( $action ) {
       case 'removeatt':
         $this->RemoveAttachment(intval($GLOBALS['attachment_id']));
         break;
       case 'removets':
         $this->RemoveTimesheet(intval($GLOBALS['timesheet_id']));
         break;
       case 'unsubscribe':
         $this->Unsubscribe(intval($GLOBALS['user_no']));
         break;
       case 'deallocate':
         $this->Deallocate(intval($GLOBALS['user_no']));
         break;
       case 'untag':
         $this->Untag(intval($GLOBALS['tag_id']));
         break;
       default:
         error_log("$sysabbr WR::Actions: ERROR: Unrecognised action: '$action'");
         $client_messages[] = "ERROR: Unrecognised action: '$action'";
     }
   }

   /////////////////////////////////////////////////////////////
   // RemoveAttachment - Detach the specified attachment from the W/R
   /////////////////////////////////////////////////////////////
   function RemoveAttachment( $attachment_id ) {
     global $client_messages;
     $sql = "SELECT * FROM request_attachment ";
     $sql .= "WHERE request_id = $this->request_id ";
     $sql .= "AND attachment_id = $attachment_id ";
     # Select the records
     $q = new PgQuery($sql);
     $q->Exec('WR::RemoveAttachment') ;
     if ( $q->rows > 0 ) {
       $row = $q->Fetch();
       $client_messages[] = "Attachment $attachment_id dissassociated from request $this->request_id.";

       $sql = "UPDATE request_attachment SET request_id = -1 ";
       $sql .= "WHERE request_id = $this->request_id ";
       $sql .= "AND attachment_id = $attachment_id ";
       # Select the records
       $q = new PgQuery($sql);
       $q->Exec('WR::RemoveAttachment') ;
     }
   }


   /////////////////////////////////////////////////////////////
   // RemoveTimesheet - Remove the specified timesheet from the W/R
   /////////////////////////////////////////////////////////////
   function RemoveTimesheet( $timesheet_id ) {
     global $client_messages;
     $sql = "SELECT *, to_char(work_on, 'DD-MM-YYYY') AS work_on ";
     $sql .= "FROM request_timesheet JOIN usr ON (request_timesheet.work_by_id = usr.user_no ) ";
     $sql .= "WHERE request_id = $this->request_id ";
     $sql .= "AND timesheet_id = $timesheet_id ";
     # Select the records
     $q = new PgQuery($sql);
     $q->Exec('WR::RemoveTimesheet') ;
     if ( $q->rows > 0 ) {
       $row = $q->Fetch();
       $client_messages[] = "Timesheet for $row->fullname on $row->work_on: $row->work_quantity $row->work_units for '$row->work_description' removed from request.";

       $sql = "DELETE FROM request_timesheet ";
       $sql .= "WHERE request_id = $this->request_id ";
       $sql .= "AND timesheet_id = $timesheet_id ";
       # Select the records
       $q = new PgQuery($sql);
       $q->Exec('WR::RemoveTimesheet') ;
     }
   }

   /////////////////////////////////////////////////////////////
   // Unsubscribe - Unsubscribe the specified user from the W/R
   /////////////////////////////////////////////////////////////
   function Unsubscribe( $user_no ) {
     global $client_messages;

     $sql = "SELECT * FROM request_interested JOIN usr ON (request_interested.user_no = usr.user_no ) ";
     $sql .= "WHERE request_id = $this->request_id ";
     $sql .= "AND request_interested.user_no = $user_no ";
     # Select the records
     $q = new PgQuery($sql);
     $q->Exec('WR::Unsubscribe') ;

     if ( $q->rows > 0 ) {
       $row = $q->Fetch();
       $client_messages[] = "User '$row->fullname' unsubscribed from request.";

       $sql = "DELETE FROM request_interested ";
       $sql .= "WHERE request_id = $this->request_id ";
       $sql .= "AND user_no = $user_no ";
       # Select the records
       $q = new PgQuery($sql);
       $q->Exec('WR::Unsubscribe') ;
     }
   }

   /////////////////////////////////////////////////////////////
   // Deallocate - De-allocate the specified user from the W/R
   /////////////////////////////////////////////////////////////
   function Deallocate( $user_no ) {
     global $client_messages;

     $sql = "SELECT * FROM request_allocated JOIN usr ON (request_allocated.allocated_to_id = usr.user_no ) ";
     $sql .= "WHERE request_id = $this->request_id ";
     $sql .= "AND allocated_to_id = $user_no ";
     # Select the records
     $q = new PgQuery($sql);
     $q->Exec('WR::Unsubscribe') ;

     if ( $q->rows > 0 ) {
       $row = $q->Fetch();
       $client_messages[] = "User '$row->fullname' de-allocated from request.";

       $sql = "DELETE FROM request_allocated ";
       $sql .= "WHERE request_id = $this->request_id ";
       $sql .= "AND allocated_to_id = $user_no ";
       # Select the records
       $q = new PgQuery($sql);
       $q->Exec('WR::Unsubscribe') ;
     }
   }

   /////////////////////////////////////////////////////////////
   // Untag - Remove a tag from the W/R
   /////////////////////////////////////////////////////////////
   function Untag( $tag_id ) {
     global $client_messages;

     $sql = "SELECT * FROM request_tag JOIN organisation_tag USING (tag_id) ";
     $sql .= "WHERE request_id = $this->request_id ";
     $sql .= "AND request_tag.tag_id = $tag_id ";
     # Select the records
     $q = new PgQuery($sql);
     $q->Exec('WR::Untag') ;

     if ( $q->rows > 0 ) {
       $row = $q->Fetch();
       $client_messages[] = "Tag '$row->tag_description' removed from request.";

       $sql = "DELETE FROM request_tag ";
       $sql .= "WHERE request_id = $this->request_id ";
       $sql .= "AND tag_id = $tag_id ";
       # Select the records
       $q = new PgQuery($sql);
       $q->Exec('WR::Untag') ;
     }
   }

   /////////////////////////////////////////////////////////////
   // Render - Return HTML to show the W/R
   //   A separate function is called for each logical area
   //   on the W/R.
   /////////////////////////////////////////////////////////////
   function Render( ) {
     global $edit;
     $html = "";

     $ef = new EntryForm( $REQUEST_URI, $this, $edit );
     $ef->NoHelp();  // Prefer this style, for the moment

     if ( $edit ) $html .= $ef->StartForm( array("autocomplete" => "off", "onsubmit" => "return CheckRequestForm();" ) );

     $html .= "<table width=\"100%\" class=\"data\" cellspacing=\"0\" cellpadding=\"0\">\n";

     $html .= $this->RenderDetails($ef);
     $html .= $this->RenderAttachments($ef);
     $html .= $this->RenderQuotations($ef);
     $html .= $this->RenderRelations($ef);
     $html .= $this->RenderAllocations($ef);
     $html .= $this->RenderTimesheets($ef);
     $html .= $this->RenderInterests($ef);
     $html .= $this->RenderTags($ef);
     $html .= $this->RenderNotes($ef);
     $html .= $this->RenderStatuses($ef);

     if ( $edit ) {
       $html .= $ef->DataEntryLine( "Quiet update", "%s", "checkbox", "send_no_email",
               array( "size" => 70, "title" => "Check the box if this update should not send e-mail notifications") );
       $html .= $ef->SubmitButton( "submit", ($this->new_record ? "Create" : "Update") );
     }
     $html .= "</table>\n";
     if ( $edit ) $html .= $ef->EndForm();

     return $html;
   }


   /////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////
   function RenderDetails( $ef ) {
     global $edit, $session, $bigboxcols, $bigboxrows;
     $html = "";
     $html .= $ef->BreakLine("Request Details");
     if ( !$this->new_record ) {
       $html .= $ef->DataEntryLine( "W/R #", "$this->request_id &nbsp; &nbsp; <b>Requested:</b> " . nice_date($this->request_on));
     }

     $html .= $ef->DataEntryLine( "Brief", "%s", "text", "brief",
               array( "size" => 70, "title" => "A brief description of the request.") );

     // Organisation drop-down
     if ( $session->AllowedTo("Admin") || $session->AllowedTo("Support") ) {
       $sql = "SELECT org_code, org_name || ' (' || abbreviation || ')' AS org_name ";
       $sql .= "FROM organisation WHERE active AND abbreviation !~ '^ *$' ";
       $sql .= "AND EXISTS(SELECT user_no FROM usr WHERE usr.org_code = organisation.org_code AND usr.status != 'I') ";
       $sql .= "AND EXISTS(SELECT work_system.system_code FROM org_system JOIN work_system ON (org_system.system_code = work_system.system_code) WHERE org_system.org_code = organisation.org_code AND work_system.active) ";
       $sql .= "ORDER BY lower(org_name)";
       $html .= $ef->DataEntryLine( "Organisation", "$this->org_name", "lookup", "org_code",
                 array("_sql" => $sql, "_null" => "--- select an organisation ---", "onchange" => "OrganisationChanged();" ) );
     }
     else {
       if ( $this->new_record ) $this->org_name = $session->org_name;
       $html .= $ef->DataEntryLine( "Organisation", "$this->org_name", "", "" );
     }

     // Person within Organisation drop-down
     $sql = "SELECT user_no, fullname ";
     if ( $this->new_record ) $sql .= " ||' ('||abbreviation||')' ";
     $sql .= "FROM usr JOIN organisation ON organisation.org_code = usr.org_code ";
     if ( $this->new_record ) {
       $sql .= "WHERE status != 'I' AND organisation.active ";
       if ( ! ($session->AllowedTo("Admin") || $session->AllowedTo("Support") ) )
         $sql .= "AND organisation.org_code = $session->org_code AND usr.org_code = $session->org_code ";
       $sql .= "AND EXISTS(SELECT work_system.system_code FROM org_system JOIN work_system ON (org_system.system_code = work_system.system_code) WHERE org_system.org_code = organisation.org_code AND work_system.active) ";
     }
     else {
       $sql .= "WHERE organisation.org_code = $this->org_code AND usr.org_code = $this->org_code ";
     }
     $sql .= "ORDER BY lower(fullname)";
     $html .= $ef->DataEntryLine( "Person", "$this->fullname", "lookup", "requester_id",
               array("_sql" => $sql, "_null" => "--- select a person ---", "onchange" => "PersonChanged();" ) );

     // System (within Organisation) drop-down
     $sql = "SELECT work_system.system_code, system_desc FROM work_system ";
     if ( $this->new_record ) {
       if ( ! ($session->AllowedTo("Admin") || $session->AllowedTo("Support") ) ) {
         $sql .= "JOIN org_system ON org_system.system_code = work_system.system_code ";
         $sql .= "JOIN system_usr ON $session->user_no = system_usr.user_no AND org_system.system_code = system_usr.system_code ";
       }
       $sql .= "WHERE active ";
       if ( ! ($session->AllowedTo("Admin") || $session->AllowedTo("Support") ) ) {
         $sql .= "AND org_system.org_code = $session->org_code ";
         $sql .= "AND system_usr.role IN ( 'A', 'S', 'C', 'E' ) ";
       }
     }
     else {
       $sql .= "JOIN org_system ON org_system.system_code = work_system.system_code ";
       if ( ! ($session->AllowedTo("Admin") || $session->AllowedTo("Support") ) )
         $sql .= "JOIN system_usr ON $session->user_no = system_usr.user_no AND org_system.system_code = system_usr.system_code ";
       $sql .= "WHERE org_system.org_code = $this->org_code ";
       if ( ! ($session->AllowedTo("Admin") || $session->AllowedTo("Support") ) )
         $sql .= "AND system_usr.role IN ( 'A', 'S', 'C', 'E' ) ";
     }
     $sql .= "ORDER BY lower(system_desc)";
     $html .= $ef->DataEntryLine( "System", "$this->system_desc", "lookup", "system_code",
               array("_sql" => $sql, "_null" => "--- select a system ---", "onchange" => "SystemChanged();") );

     // Type of Request
     $html .= $ef->DataEntryLine( "Type", $this->request_type_desc, "lookup", "request_type",
               array("_type" => "request|request_type") );

     // Urgency of Request
     $html .= $ef->DataEntryLine( "Urgency", $this->urgency_desc, "lookup", "urgency",
               array("_type" => "request|urgency") );

     // Importance of Request
     $html .= $ef->DataEntryLine( "Importance", $this->importance_desc, "lookup", "importance",
               array("_type" => "request|importance") );

     // Detailed description
     $html .= $ef->DataEntryLine( "Details", html_format($this->detailed), "textarea", "detailed",
               array("title" => "Full details of the request", "rows" => $bigboxrows, "cols" => $bigboxcols  ) );

     return $html;
   }


   /////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////
   function RenderAttachments( $ef ) {
     global $session;
     $html = "";
     $sql = "SELECT att_filename, attachment_id, att_brief, att_description, ";
     $sql .= "to_char(attached_on, 'HH24:MI DD-MM-YYYY') AS att_on, fullname, type_desc ";
     $sql .= "FROM request_attachment JOIN usr ON ( attached_by = user_no ) ";
     $sql .= "LEFT OUTER JOIN attachment_type ON ( request_attachment.att_type = attachment_type.type_code ) ";
     $sql .= "WHERE request_id = $this->request_id ";
     $sql .= "ORDER BY request_id, attachment_id";
     # Select the records
     $q = new PgQuery($sql);
     $q->Exec('WR::Attachments') ;
     if ( $ef->editmode || $q->rows )
       $html .= $ef->BreakLine("Attached Files");
     if ( $q->rows ) {
       $html .= '<tr><td colspan="2"><table width="100%">'."\n";
       $html .= '<tr><th class="pcol">File</th><th class="pcol">Description</th><th class="pcol">By</th><th class="pcol">On</th><th class="pcol">Type</th><th class="pcol">&nbsp;</th></tr>'."\n";
       $attachment_format = '<tr class="row%d"><td class="entry"><a href="/attachment.php/%s?id=%d">%s</a></td>';
       $attachment_format .= '<td class="entry">%s</td><td class="entry" style="white-space: nowrap;">%s</td><td class="entry">%s</td><td class="entry">%s</td><td class="entry" width="2%%">%s</td></tr>'."\n";
       $delete_link_format = '<a href="/wr.php?request_id=%d&action=removeatt&attachment_id=%d&edit=1" title="Remove attachment from this request"><img src="'.$GLOBALS['images'].'/delete.png" border="none"></a>';
       while( $row = $q->Fetch() ) {
         $delete_link = sprintf( $delete_link_format, $this->request_id, $row->attachment_id );
         $html .= sprintf( $attachment_format, ($q->rownum % 2),
                    $row->att_filename, $row->attachment_id, $row->att_filename, $row->att_brief,
                    $row->fullname, $row->att_on, $row->type_desc, $delete_link
                  );
       }
       $html .= '</table></td></tr>'."\n";
     }

     if ( $ef->editmode ) {
       $html .= '<tr><th class="prompt">Add File</th><td><table><tr>'."\n";
       // Select the file
       $html .= '<td class="entry">';
       $html .= $ef->DataEntryField( "", "file", "att_filename",
                 array("title" => "Enter the name of the file to be attached" ) );
       $html .= '</td>';

       // Enter the description
       $html .= '<th class="prompt">Description</th><td class="entry">';
       $html .= $ef->DataEntryField( "", "text", "att_brief",
                 array("title" => "Enter a description for the file", "size" => 50 ) );
       $html .= '</td>';

       $html .= '</tr></table></td></tr>'."\n";
     }
     return $html;
   }


   /////////////////////////////////////////////////////////////
   // Render the Quotations section of the W/R
   /////////////////////////////////////////////////////////////
   function RenderQuotations( $ef ) {
     global $session;
     $html = "";
     $sql = "SELECT request_quote.*, ru.fullname AS quote_by, au.fullname AS approved_by, ";
     $sql .= "to_char(quoted_on, 'HH24:MI DD-MM-YYYY') AS quoted_on, lookup_desc AS quote_type_desc ";
     $sql .= "FROM request_quote ";
     $sql .= "LEFT OUTER JOIN usr ru ON ( request_quote.quote_by_id = ru.user_no ) ";
     $sql .= "LEFT OUTER JOIN usr au ON ( request_quote.approved_by_id = au.user_no ) ";
     $sql .= "LEFT OUTER JOIN lookup_code ON ( source_table = 'request_quote' AND source_field = 'quote_type' AND lookup_code = request_quote.quote_type) ";
     $sql .= "WHERE request_id = $this->request_id ";
     $sql .= "ORDER BY request_id, quote_id";
     # Select the records
     $q = new PgQuery($sql);
     $q->Exec('WR::Quotations');
     if ( $ef->editmode || $q->rows )
       $html .= $ef->BreakLine("Quotations");
     if ( $q->rows ) {
       $html .= '<tr><td colspan="2"><table width="100%">'."\n";
       $html .= '<tr><th class="pcol">Type</th>';
       $html .= '<th class="pcol">Quote On</th>';
       $html .= '<th class="pcol">By</th>';
       $html .= '<th class="pcol">Brief</th>';
       $html .= '<th class="pcol">Quote</th></tr>'."\n";
       $line_format = '<tr class="row%d"><td class="entry" width="5%%">%s</td>';
       $line_format .= '<td class="entry">%s</td>';
       $line_format .= '<td class="entry" style="white-space: nowrap;">%s</td>';
       $line_format .= '<td class="entry">%s</td>';
       $line_format .= '<td class="entry" style="white-space: nowrap;">%s %s</td></tr>'."\n";
       $detail_format = '<tr class="row%d"><td class="entry">&nbsp;</td><td class="entry" colspan="4">%s</td></tr>'."\n";
       while( $row = $q->Fetch() ) {
         $html .= sprintf( $line_format,
                    ($q->rownum % 2), $row->quote_type_desc, $row->quote_by, $row->quoted_on, $row->quote_brief,
                    $row->quote_amount, $row->quote_units
                  );
         if ( trim("$row->quote_details") != "" ) {
           $html .= sprintf( $detail_format,
                    ($q->rownum % 2), $row->quote_details
                  );
         }
       }
       $html .= '</table></td></tr>'."\n";
     }

     if ( $ef->editmode ) {
       $html .= '<tr><th class="prompt">Add Quote</th><td><table><tr>'."\n";

       $html .= '<td class="entry">';
       $html .= $ef->DataEntryField( "", "text", "quote_brief",
                 array("title" => "Enter brief description of the quote", "size" => 40 ) );
       $html .= '</td>';

       $html .= '<th class="prompt">Type</th><td class="entry">';
       if ( !isset($_POST['quote_type']) ) $_POST['quote_type'] = 'E';  // Default to Estimate
       $html .= $ef->DataEntryField( "", "lookup", "quote_type",
                 array("_type" => "request_quote|quote_type", "style" => "width: 6em;",
                       "title" => "The type of quote you are entering" ) );
       $html .= '</td>';

       $html .= '<th class="prompt">Amount</th><td class="entry">';
       $html .= $ef->DataEntryField( "", "number", "quote_amount",
                 array("title" => "Enter the amount of the quote",
                       "size" => 10, "onblur" => "this.value=CheckNumber(this,0,999999999)" ) );
       $html .= '</td>';

       $html .= '<td class="entry">';
       if ( !isset($_POST['quote_units']) ) $_POST['quote_units'] = 'hours';  // Default to Hours
       $html .= $ef->DataEntryField( "", "lookup", "quote_units",
                 array("_type" => "request_quote|quote_units", "style" => "width: 6em;",
                       "title" => "The units for the amount of the quote you are adding" ) );
       $html .= '</td>';

       $html .= '</tr></table></td></tr>'."\n";

       // Enter the description
       $html .= '<tr><th class="prompt">Description</th><td class="entry">';
       $html .= $ef->DataEntryField( "", "textarea", "quote_details",
                 array("title" => "Enter a detailed description for the quote.", "cols" => 70, "rows" => 4 ) );
       $html .= '</td>';

     }
     return $html;
   }


   /////////////////////////////////////////////////////////////
   // Render the details of any requests related to/from this one
   /////////////////////////////////////////////////////////////
   function RenderRelations( $ef ) {
     global $session;
     $html = "";
     $header_done = false;
     $sql = "SELECT parent.*, request_request.*, parent.request_id AS parent_id, ";
     $sql .= "lsd.lookup_desc AS last_status_desc, llt.lookup_desc AS link_type_desc ";
     $sql .= "FROM request_request ";
     $sql .= "JOIN request parent ON (request_request.request_id = parent.request_id) ";
     $sql .= "JOIN request child ON (request_request.to_request_id = child.request_id) ";
     $sql .= "JOIN lookup_code lsd ON (lsd.source_table = 'request' AND lsd.source_field = 'status_code' AND lsd.lookup_code = parent.last_status) ";
     $sql .= "JOIN lookup_code llt ON (llt.source_table = 'request_request' AND llt.source_field = 'link_type' AND llt.lookup_code = request_request.link_type) ";
     $sql .= "WHERE request_request.to_request_id = ? ";
     $sql .= "ORDER BY request_request.request_id, request_request.to_request_id ";
     # Select the records
     $q = new PgQuery($sql, $this->request_id);
     $q->Exec('WR::Relations');
     if ( $ef->editmode || $q->rows ) {
       $html .= $ef->BreakLine("Related Requests");
       $header_done = true;
     }
     if ( $q->rows ) {
       $html .= '<tr><td colspan="2"><table width="100%">'."\n";
       $html .= '<tr><th class="pcol">Parent</th>';
       $html .= '<th class="pcol">Brief</th>';
       $html .= '<th class="pcol">Status</th>';
       $html .= '<th class="pcol">Link</th>';
       $html .= '<th class="pcol">This W/R</th></tr>'."\n";
       $line_format = '<tr class="row%d"><td class="entry" width="5%%"><a href="/wr.php?request_id=%d">%s</a></td>';
       $line_format .= '<td class="entry"><a href="/wr.php?request_id=%d">%s</a></td>';
       $line_format .= '<td class="entry">%s</td>';
       $line_format .= '<td class="entry">%s</td>';
       $line_format .= '<td class="entry">%s</td></tr>'."\n";
       while( $row = $q->Fetch() ) {
         if ( trim($row->brief) == '' ) $row->brief = substr($row->detailed,0,50) . "...";
         $html .= sprintf( $line_format,
                    ($q->rownum % 2), $row->parent_id, $row->parent_id, $row->parent_id, $row->brief, $row->last_status_desc, $row->link_type_desc,
                    $this->request_id
                  );
       }
       $html .= '</table></td></tr>'."\n";
     }

     $sql = "SELECT child.*, request_request.*, child.request_id AS child_id, ";
     $sql .= "lsd.lookup_desc AS last_status_desc, llt.lookup_desc AS link_type_desc ";
     $sql .= "FROM request_request ";
     $sql .= "JOIN request parent ON (request_request.request_id = parent.request_id) ";
     $sql .= "JOIN request child ON (request_request.to_request_id = child.request_id) ";
     $sql .= "JOIN lookup_code lsd ON (lsd.source_table = 'request' AND lsd.source_field = 'status_code' AND lsd.lookup_code = parent.last_status) ";
     $sql .= "JOIN lookup_code llt ON (llt.source_table = 'request_request' AND llt.source_field = 'link_type' AND llt.lookup_code = request_request.link_type) ";
     $sql .= "WHERE request_request.request_id = ? ";
     $sql .= "ORDER BY request_request.request_id, request_request.to_request_id ";
     # Select the records
     $q = new PgQuery($sql, $this->request_id);
     $q->Exec('WR::Relations');
     if ( ! $header_done && ($ef->editmode || $q->rows) ) {
       $html .= $ef->BreakLine("Related Requests");
       $header_done = true;
     }
     if ( $q->rows ) {
       $html .= '<tr><td colspan="2"><table width="100%">'."\n";
       $html .= '<tr><th class="pcol" style="white-space: nowrap;">This W/R</th>';
       $html .= '<th class="pcol">Link</th>';
       $html .= '<th class="pcol">Child</th>';
       $html .= '<th class="pcol">Brief</th>';
       $html .= '<th class="pcol">Status</th></tr>'."\n";
       $line_format = '<tr class="row%d"><td class="entry" width="5%%">%s</td>';
       $line_format .= '<td class="entry">%s</td>';
       $line_format .= '<td class="entry"><a href="/wr.php?request_id=%d">%s</a></td>';
       $line_format .= '<td class="entry"><a href="/wr.php?request_id=%d">%s</a></td>';
       $line_format .= '<td class="entry">%s</td></tr>'."\n";
       while( $row = $q->Fetch() ) {
         if ( trim($row->brief) == '' ) $row->brief = substr($row->detailed,0,50) . "...";
         $html .= sprintf( $line_format,
                    ($q->rownum % 2), $this->request_id, $row->link_type_desc,
                    $row->child_id, $row->child_id, $row->child_id, $row->brief, $row->last_status_desc
                  );
       }
       $html .= '</table></td></tr>'."\n";
     }

     if ( $ef->editmode ) {
       $html .= '<tr><th class="prompt">From W/R</th><td><table><tr>'."\n";

       $html .= '<td class="entry">';
       $html .= $ef->DataEntryField( "", "integer", "parent_request_id",
                 array("title" => "Enter the W/R# of the parent request", "size" => 8,
                       "onblur" => "this.value=CheckNumber(this,0,99999999)" ) );
       $html .= '</td>';

       $html .= '<th class="prompt">Link Type</th><td class="entry">';
       $html .= $ef->DataEntryField( "", "lookup", "link_type",
                 array("_type" => "request_request|link_type", "style" => "width: 12em;",
                       "title" => "The way the parent request links to this one" ) );
       $html .= '</td>';

       $html .= '</tr></table></td></tr>'."\n";
     }
     return $html;
   }

   /////////////////////////////////////////////////////////////
   // Display the people who are allocated to work on this
   /////////////////////////////////////////////////////////////
   function RenderAllocations( $ef ) {
     global $session;
     $html = "";
     $sql = "SELECT request_allocated.*, usr.fullname, usr.email, ";
     $sql .= "to_char(allocated_on, 'HH24:MI DD-MM-YYYY') AS alloc_on ";
     $sql .= "FROM request_allocated JOIN usr ON ( allocated_to_id = user_no ) ";
     $sql .= "WHERE request_id = $this->request_id ";
     $sql .= "ORDER BY request_id, allocated_on";
     # Select the records
     $q = new PgQuery($sql);
     $q->Exec('WR::Attachments') ;
     if ( $ef->editmode || $q->rows )
       $html .= $ef->BreakLine("Work Allocated To");
     if ( $q->rows ) {
       $html .= '<tr><th class="prompt">&nbsp;</th><td class="entry" style="vertical-align: middle;">'."\n";
       $line_format = '<a href="/usr.php?user_no=%d">%s</a>';
       if ( $ef->editmode ) {
         $line_format .= '<a href="/wr.php?request_id=%d&action=deallocate&user_no=%d&edit=1" title="Deallocate %s from this request"><img src="'.$GLOBALS['images'].'/delete.png" border="none"></a>';
       }
       $line_format .= "&nbsp; &nbsp;\n";
       while( $row = $q->Fetch() ) {
         $html .= sprintf( $line_format,
                    $row->allocated_to_id, $row->fullname,
                    $this->request_id, $row->allocated_to_id, $row->fullname
                  );
       }
       $html .= '</td></tr>'."\n";
     }

     if ( $ef->editmode ) {
       $html .= '<tr><th class="prompt">Allocate</th>'."\n";
       // Select the file
       $usr_sql = "SELECT user_no, abbreviation || ': ' || fullname ";
       $usr_sql .= "FROM usr JOIN organisation ON ( usr.org_code = organisation.org_code) ";
       if ( isset($this->org_code) ) {
         $usr_sql .= "WHERE status != 'I' AND organisation.org_code IN ( $this->org_code, $session->org_code )";
       }
       else {
          $usr_sql .= "WHERE status != 'I' AND organisation.org_code = $session->org_code ";
       }
       $usr_sql .= " ORDER BY organisation.org_code, fullname;";
       $html .= '<td class="entry">';
       $html .= $ef->DataEntryField( "", "lookup", "allocatable",
                 array("title" => "Select the person to allocate this W/R to",
                       "style" => "vertical-align: top; width: 20em;",
                       "_null" => "--- select a person ---",
                       "_sql"  => $usr_sql ) );

       // Enter the description
       $html .= $ef->DataEntryField( "", "button", "add_allocation",
                 array("title" => "Add this person to the allocations for this work request",
                       "value" => "Add Person", "style" => "vertical-align: top;",
                       "onClick" => "return AssignSelected(document.forms.form.allocatable,'new_allocations[]');" ) );

       $html .= $ef->DataEntryField( "", "select", "new_allocations[]",
                 array("title" => "Unselect the person not allocate this W/R to them",
                       "style" => "width: 20em;", "multiple"  => "true", "size" => 1 ) );
       $html .= '</td></tr>'."\n";
     }
     return $html;
   }

   /////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////
   function RenderTimesheets( $ef ) {
     global $session;
     $html = "";
     $sql = "SELECT request_timesheet.*, usr.fullname, usr.email, ";
     $sql .= "to_char(work_on, 'DD-MM-YYYY') AS work_on ";
     $sql .= "FROM request_timesheet JOIN usr ON ( request_timesheet.work_by_id = usr.user_no ) ";
     $sql .= "WHERE request_id = $this->request_id ";
     $sql .= "ORDER BY request_id, usr.fullname";
     # Select the records
     $q = new PgQuery($sql);
     $q->Exec('WR::Timesheet') ;
     if ( $ef->editmode || $q->rows ) {
       $html .= $ef->BreakLine("Work Done");
       $line_format = '<tr class="row%d"><td class="entry" style="white-space: nowrap;">%s</td>';
       $line_format .= '<td class="entry">%s</td>';
       $line_format .= '<td class="entry" style="white-space: nowrap; text-align: right; ">%s %s</td>';
       $line_format .= '<td class="entry" style="white-space: nowrap; text-align: right; ">%s</td>';
       $line_format .= '<td class="entry" style="white-space: nowrap; text-align: right; ">%s</td>';
       $line_format .= '<td class="entry" width="50%%">%s</td>';
       $line_format .= '<td class="entry" width="2%%">%s</td></tr>'."\n";
       $delete_link_format = '<a href="/wr.php?request_id=%d&action=removets&timesheet_id=%d&edit=1" title="Remove timesheet from this request"><img src="'.$GLOBALS['images'].'/delete.png" border="none"></a>';

       $html .= '<tr><td colspan="2"><table width="100%">'."\n";
       $html .= '<tr><th class="pcol">Done By</th>';
       $html .= '<th class="pcol">Done On</th>';
       $html .= '<th class="pcol">Quantity</th>';
       $html .= '<th class="pcol">Rate</th>';
       $html .= '<th class="pcol">Cost</th>';
       $html .= '<th class="pcol">Description</th>';
       $html .= '<th class="pcol">&nbsp;</th></tr>'."\n";
     }
     if ( $q->rows ) {
       $total = 0;
       while( $row = $q->Fetch() ) {
         $delete_link = sprintf( $delete_link_format,
                    $this->request_id, $row->timesheet_id );
         $html .= sprintf( $line_format,
                    ($q->rownum % 2), $row->fullname, $row->work_on, $row->work_quantity, $row->work_units,
                    $row->work_rate, $row->work_quantity * $row->work_rate, $row->work_description, $delete_link
                  );
         $total += ($row->work_quantity * $row->work_rate);
       }
       $html .= sprintf( $line_format,
                    (($q->rownum + 1) % 2), "<b>Total</b>", "", "", "", "", "<b>$total</b>", "", "" );
     }

     if ( $ef->editmode ) {

       if ( !isset($_POST['work_on']) ) $_POST['work_on'] = 'today';  // Default to Today
       if ( !isset($_POST['work_units']) ) $_POST['work_units'] = 'hours';  // Default to Hours

       $work_on = $ef->DataEntryField( "", "number", "work_on",
                   array("title" => "Enter the date of this work", "size" => 10,
                         "onblur" => "this.value=CheckDate(this)" ) );

       $work_quantity = $ef->DataEntryField( "", "number", "work_quantity",
                   array("title" => "Enter the number of units of work",
                         "size" => 8, "onblur" => "this.value=CheckNumber(this,0,999999999)" ) );

       $work_units = $ef->DataEntryField( "", "lookup", "work_units",
                   array("_type" => "request_quote|quote_units", "style" => "width: 5em;",
                         "title" => "The type of units for this work" ) );

       $work_rate = $ef->DataEntryField( "", "number", "work_rate",
                   array("title" => "Enter the rate / unit for this work",
                         "size" => 10, "onblur" => "this.value=CheckNumber(this,0,999999999)" ) );

       $work_desc = $ef->DataEntryField( "", "text", "work_description",
                   array("title" => "Enter brief description of the work done", "size" => 40 ) );

       $html .= sprintf( $line_format, ($q->rownum % 2),
                $session->fullname,
                $work_on,
                $work_quantity,
                "<br />$work_units",
                $work_rate,
                "",
                $work_desc,
                ""
                );

     }

     if ( $ef->editmode || $q->rows )
       $html .= '</table></td></tr>'."\n";

     return $html;
   }

   /////////////////////////////////////////////////////////////
   // Display the people who are being notified about changes
   /////////////////////////////////////////////////////////////
   function RenderInterests( $ef ) {
     global $session;
     $html = "";

     $sql = "SELECT request_interested.*, usr.fullname, usr.email ";
     $sql .= "FROM request_interested JOIN usr ON ( request_interested.user_no = usr.user_no ) ";
     $sql .= "WHERE request_id = $this->request_id ";
     $sql .= "ORDER BY request_id, usr.fullname";
     # Select the records
     $q = new PgQuery($sql);
     $q->Exec('WR::Interests') ;
     if ( $ef->editmode || $q->rows )
       $html .= $ef->BreakLine("Interested Users");
     if ( $q->rows ) {
       $html .= '<tr><th class="prompt">&nbsp;</th><td class="entry" style="vertical-align: middle;">'."\n";
       $line_format = '<a href="/usr.php?user_no=%d">%s</a>';
       if ( $ef->editmode ) {
         $line_format .= '<a href="/wr.php?request_id=%d&action=unsubscribe&user_no=%d&edit=1" title="Unsubscribe %s from this request"><img src="'.$GLOBALS['images'].'/delete.png" border="none"></a>';
       }
       $line_format .= "&nbsp; &nbsp;\n";
       while( $row = $q->Fetch() ) {
         $html .= sprintf( $line_format,
                    $row->user_no, $row->fullname,
                    $this->request_id, $row->user_no, $row->fullname
                  );
       }
       $html .= '</td></tr>'."\n";
     }

     if ( $ef->editmode ) {
       $html .= '<tr><th class="prompt">Subscribe</th>'."\n";
       // Select the file
       $usr_sql = "SELECT user_no, abbreviation || ': ' || fullname ";
       $usr_sql .= "FROM usr JOIN organisation ON ( usr.org_code = organisation.org_code) ";
       if ( isset($this->org_code) ) {
         $usr_sql .= "WHERE status != 'I' AND organisation.org_code IN ( $this->org_code, $session->org_code )";
       }
       else {
          $usr_sql .= "WHERE status != 'I' AND organisation.org_code = $session->org_code ";
       }
       $usr_sql .= " ORDER BY organisation.org_code, fullname;";
       $html .= '<td class="entry">';
       $html .= $ef->DataEntryField( "", "lookup", "subscribable",
                 array("title" => "Select the person to subscribe to this W/R",
                       "style" => "vertical-align: top; width: 20em;",
                       "_null" => "--- select a person ---",
                       "_sql"  => $usr_sql ) );

       // Enter the description
       $html .= $ef->DataEntryField( "", "button", "add_subscription",
                 array("title" => "Add this person to the subscriber list for this work request",
                       "value" => "Add Person", "style" => "vertical-align: top;",
                       "onClick" => "return AssignSelected(document.forms.form.subscribable,'new_subscriptions[]');" ) );

       $html .= $ef->DataEntryField( "", "select", "new_subscriptions[]",
                 array("title" => "Unselect the person to not subscribe them to this W/R",
                       "style" => "width: 20em;", "multiple"  => "true", "size" => 1 ) );
       $html .= '</td></tr>'."\n";
     }
     return $html;
   }

   /////////////////////////////////////////////////////////////
   // Display the tags that have been assigned to this W/R
   /////////////////////////////////////////////////////////////
   function RenderTags( $ef ) {
     global $session;
     $html = "";

     $sql = "SELECT organisation_tag.* ";
     $sql .= "FROM request_tag JOIN organisation_tag USING ( tag_id ) ";
     $sql .= "WHERE request_id = $this->request_id ";
     $sql .= "ORDER BY request_id, organisation_tag.tag_sequence";
     # Select the records
     $q = new PgQuery($sql);
     $q->Exec('WR::Tags') ;
     if ( $ef->editmode || $q->rows )
       $html .= $ef->BreakLine("Assigned Tags");
     if ( $q->rows ) {
       $html .= '<tr><th class="prompt">&nbsp;</th><td class="entry" style="vertical-align: middle;">'."\n";
       $line_format = '%s';
       if ( $ef->editmode ) {
         $line_format .= '<a href="/wr.php?request_id=%d&action=untag&tag_id=%d&edit=1" title="Remove the %s tag from this request"><img src="'.$GLOBALS['images'].'/delete.png" border="none"></a>';
       }
       $line_format .= "&nbsp; &nbsp;\n";
       while( $row = $q->Fetch() ) {
         $html .= sprintf( $line_format,
                    $row->tag_description,
                    $this->request_id, $row->tag_id, $row->tag_description
                  );
       }
       $html .= '</td></tr>'."\n";
     }

     if ( $ef->editmode ) {
       $html .= '<tr><th class="prompt">Assign Tag</th>'."\n";
       // Select the file
       $usr_sql = "SELECT tag_id, tag_description ";
       $usr_sql .= "FROM organisation_tag JOIN organisation ON ( organisation_tag.org_code = organisation.org_code) ";
       $usr_sql .= "WHERE organisation_tag.active AND organisation.active AND organisation.org_code ";
       if ( isset($this->org_code) ) {
         $usr_sql .= "IN ( $this->org_code, $session->org_code )";
       }
       else {
          $usr_sql .= "= $session->org_code ";
       }
       $usr_sql .= " ORDER BY organisation_tag.tag_sequence, lower(organisation_tag.tag_description);";
       $html .= '<td class="entry">';
       $html .= $ef->DataEntryField( "", "lookup", "orgtaglist",
                 array("title" => "Select the tag to assign to this W/R",
                       "style" => "vertical-align: top; width: 20em;",
                       "_null" => "--- select a tag ---",
                       "_sql"  => $usr_sql ) );

       // Enter the description
       $html .= $ef->DataEntryField( "", "button", "add_orgtag",
                 array("title" => "Add this tag to the assigned list for this work request",
                       "value" => "Assign Tag", "style" => "vertical-align: top;",
                       "onClick" => "return AssignSelected(document.forms.form.orgtaglist,'new_tags[]');" ) );

       $html .= $ef->DataEntryField( "", "select", "new_tags[]",
                 array("title" => "Deselect the tag to not assign it to this W/R",
                       "style" => "width: 20em;", "multiple"  => "true", "size" => 1 ) );
       $html .= '</td></tr>'."\n";
     }
     return $html;
   }

   /////////////////////////////////////////////////////////////
   // Display the notes + notes entry panel
   /////////////////////////////////////////////////////////////
   function RenderNotes( $ef ) {
     global $session;
     $html = "";
     $sql = "SELECT request_note.*, ru.fullname AS note_by, ";
     $sql .= "to_char(note_on, 'HH24:MI DD-MM-YYYY') AS noted_on ";
     $sql .= "FROM request_note ";
     $sql .= "LEFT OUTER JOIN usr ru ON ( request_note.note_by_id = ru.user_no ) ";
     $sql .= "WHERE request_id = $this->request_id ";
     $sql .= "ORDER BY request_id, note_on";
     # Select the records
     $q = new PgQuery($sql);
     $q->Exec('WR::Notes');
     if ( $ef->editmode || $q->rows )
       $html .= $ef->BreakLine("Notes");
     if ( $q->rows ) {
       $html .= '<tr><th class="pcol">&nbsp;</th><td><table width="100%">'."\n";
       $html .= '<tr><th class="pcol">Noted By/On</th>';
//       $html .= '<th class="pcol">Noted On</th>';
       $html .= '<th class="pcol">Details</th></tr>'."\n";
       $line_format = '<tr class="row%d"><td class="entry" width="8%%" style="white-space: nowrap;">%s<br />%s</td>';
//       $line_format .= '<td class="entry" width="8%%" style="white-space: nowrap;">%s</td>';
       $line_format .= '<td class="entry">%s</td></tr>'."\n";
       while( $row = $q->Fetch() ) {
         $html .= sprintf( $line_format,
                    ($q->rownum % 2), $row->note_by, $row->noted_on, html_format($row->note_detail)
                  );
       }
       $html .= '</table></td></tr>'."\n";
     }

     if ( $ef->editmode ) {
       $html .= '<tr><th class="prompt">&nbsp;<br />Add Note</th><td><table><tr>'."\n";

       // Enter the description
       $html .= '<tr><td class="entry">';
       $html .= $ef->DataEntryField( "", "textarea", "note_detail",
                 array("title" => "Enter a note for this request", "cols" => 70, "rows" => 10 ) );
       $html .= '</td>';

       $html .= '<td class="entry">';
       $html .= $ef->DataEntryField( "", "checkbox", "preserve_html",
                 array("title" => "Preserve the raw HTML so that it is inlined, and the HTML codes will not be visible" ) );
       $html .= 'Preserve HTML</td></table>';

     }
     return $html;
   }

   /////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////
   function RenderStatuses( $ef ) {
     global $session;
     $html = "";
     $sql = "SELECT request_status.*, ru.fullname AS status_by, ";
     $sql .= "to_char(status_on, 'HH24:MI DD-MM-YYYY') AS status_on, lookup_desc AS status_type_desc ";
     $sql .= "FROM request_status ";
     $sql .= "LEFT OUTER JOIN usr ru ON ( request_status.status_by_id = ru.user_no ) ";
     $sql .= "LEFT OUTER JOIN lookup_code ON ( source_table = 'request' AND source_field = 'status_code' AND lookup_code = request_status.status_code) ";
     $sql .= "WHERE request_id = $this->request_id ";
     $sql .= "ORDER BY request_id, request_status.status_on";
     # Select the records
     $q = new PgQuery($sql);
     $q->Exec('WR::Statuses');
     if ( $ef->editmode || $q->rows )
       $html .= $ef->BreakLine("Changes in Status");
     if ( $q->rows ) {
       $html .= '<tr><th class="pcol">&nbsp;</th><td><table width="100%">'."\n";
       $html .= '<tr><th class="pcol">Changed By</th>';
       $html .= '<th class="pcol">Changed On</th>';
       $html .= '<th class="pcol">Changed To</th></tr>'."\n";
       $line_format = '<tr class="row%d"><td class="entry" style="white-space: nowrap;">%s</td>';
       $line_format .= '<td class="entry" style="white-space: nowrap;">%s</td>';
       $line_format .= '<td class="entry" style="white-space: nowrap;">%s - %s</td></tr>'."\n";
       while( $row = $q->Fetch() ) {
         $html .= sprintf( $line_format,
                    ($q->rownum % 2), $row->status_by, $row->status_on,
                    $row->status_code, $row->status_type_desc
                  );
       }
       $html .= '</table></td></tr>'."\n";
     }

     if ( $ef->editmode ) {
       $html .= '<tr><th class="prompt">Change Status</th><td><table><tr>'."\n";

       $html .= '<td class="entry">';
       if ( !isset($_POST['status_code']) ) $_POST['status_code'] = $this->last_status;  // Default to current status
       $html .= $ef->DataEntryField( "", "lookup", "status_code",
                 array("_type" => "request|status_code", "style" => "width: 15em;",
                       "title" => "The new status of the request" ) );
       $html .= '</td>';

       $html .= '</tr></table></td></tr>'."\n";

     }
     return $html;
   }

   /////////////////////////////////////////////////////////////
   // This is called prior to writing the record to perform any
   // cross-field (or other) validations.  If it returns false
   // then the record will not be written
   /////////////////////////////////////////////////////////////
   function Validate( $ef ) {
     global $client_messages;
     error_log("$system_name: vpw: WARNING: Not validating request");
     $client_messages[] = "WARNING: Not validating request details yet.";

     // If we validated OK, make sure the request.last_status is synced with any submitted status.
     $_POST['last_status'] = $_POST['status_code'];
     return true;
   }


   /////////////////////////////////////////////////////////////
   // This is the main routine to actually write the record.  In
   // the work request case we actually call a lot of other
   // functions (roughly corresponding to the different Render
   // ones used for displaying the form.
   /////////////////////////////////////////////////////////////
   function Write( $ef ) {
     global $client_messages, $request_id;
     error_log("$system_name: vpw: Writing request details to database");
     $qry = new PgQuery("BEGIN");  $qry->Exec("WR::Write");

     $this->chtype = strtolower($_POST['submit']);

     $db_errors = false;
     $save_detailed_description = $_POST['detailed'];
     $_POST['detailed'] = htmlspecialchars($save_detailed_description);
     $sql = sql_from_post( $this->chtype, "request", "WHERE request_id='$this->request_id'");
     $_POST['detailed'] = $save_detailed_description;
     $qry = new PgQuery($sql);
     if ( !$qry->Exec("WR::Write") ) {
       $client_messages[] = "$qry->errorstring";
       $db_errors = true;
     }
     else {
       // If we are creating a new record, we need to grab the ID that it got
       if ( "create" == $this->chtype ) {
         // Fetch the request_id for this record.
         $sql = "SELECT currval('request_request_id_seq');";
         $qry = new PgQuery($sql);
         $qry->Exec("WR::Write");
         $row = $qry->Fetch(true);    // Fetch results as array
         $request_id = $row[0];

         // Fetch the other details for the request and assign them into this object.
         $this->ReadRequest($request_id);
         $this->send_an_email = true;
       }
       $this->DetectEmailChanges();
     }

     if ( !$db_errors && isset($_POST['note_detail']) && trim($_POST['note_detail']) != "" ) {
       $db_errors = ! $this->AddNote();
     }

     if ( !$db_errors && isset($_POST['status_code'])
             && ($_POST['status_code'] != $this->last_status || "create" == $this->chtype ) ) {
       $db_errors = ! $this->NewStatusCode();
     }

     if ( !$db_errors && $_FILES['att_filename']['tmp_name'] != ""
                && $_FILES['att_filename']['name'] != "" ) {
       $db_errors = ! $this->AttachFile('att_filename',$_POST['att_brief']);
     }

     if ( !$db_errors && intval(trim($_POST['parent_request_id'])) > 0 ) {
       $db_errors = ! $this->AddParent();
     }

     if ( !$db_errors && trim($_POST['quote_brief']) != "" ) {
       $db_errors = ! $this->AddQuote();
     }

     if ( !$db_errors && isset($_POST['new_allocations']) ) {
       $db_errors = ! $this->NewAllocations();
     }

     if ( !$db_errors && ('create' == $this->chtype || isset($_POST['new_subscriptions'])) ) {
       $db_errors = ! $this->NewSubscriptions();
     }

     if ( !$db_errors && isset($_POST['new_tags']) ) {
       $db_errors = ! $this->NewTags();
     }

     if ( !$db_errors && trim($_POST['work_description']) != "" ) {
       $db_errors = ! $this->AddWork();
     }

     $qry = new PgQuery( ( $db_errors ? "ROLLBACK;" : "COMMIT;") );  $qry->Exec("WR::Write");
     if ( $db_errors ) {
       $client_messages[] = "ERROR: Database problem  - Request not written.";
     }
     else {
       $client_messages[] = "Request details written.";

       $this->NotifyEmail();

       // Since we wrote it all successfully, clear the $_POST array
       // so that the posted data isn't all re-used in the form fields,
       // and we use the on-disk data instead.
       $_POST = array();
     }
     return true;
   }


   /////////////////////////////////////////////////////////////
   // Send an e-mail notifying changes to the W/R
   /////////////////////////////////////////////////////////////
   function NotifyEmail ()
   {
     global $base_dns, $session, $system_name, $admin_email, $debug_email;

     if ( $this->chtype != 'create' && $_POST['send_no_email'] == 'on' ) {
       // This is an update, and the user has asked for it to be quiet.
       return;
     }

     $mail = &new phpmailer ();
     // $mail->IsSendmail();  // Use sendmail to send
     // We use neither, and it will default to the PHP mail() function - good.

     $mail->From = $admin_email;
     $mail->FromName = $system_name;
     $mail->AddReplyTo( $session->email, $session->fullname );

     $send_to = $this->GetRecipients();
     foreach ( $send_to as $email => $name ) {
       if ( isset($debug_email) ) {
         if ( $debug_to != "" ) $debug_to .= ", ";
         $debug_to .= "$name <$email>";
       }
       else {
         $mail->AddAddress($email, $name);
       }
     }
     if ( isset($debug_email) ) {
       $mail->IsSMTP();      // Use internal SMTP to send for debugging
       $mail->AddAddress( $debug_email, "WRMS EMail Testing" );
     }


     $mail->Subject = 'WR #' . $this->request_id . ' ['.$this->system_code.'/'.$this->username.'] '.$this->chtype.'d: '
                      . $this->brief;

     $tbody  = "Request No:  $this->request_id\n"
             . "Overview:    $this->brief\n"
             . "Type:        $this->request_type_desc\n"
             . "Importance:  $this->importance_desc\n"
             . "Urgency:     $this->urgency_desc\n";

     $hbody  = <<<EOX
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html><head>
<title>$mail->Subject</title>
<link rel='stylesheet' type='text/css' href='$GLOBALS[base_dns]/email.css' />
<style type="text/css"><!--
A {color: navy; text-decoration:underline;  }
body, input {font: 13px  tahoma, sans-serif; color: #000000; margin: 0.3em; }
p, td { margin: 0 2em 0.5em; }
td.etd {font: bold 13px tahoma, sans-serif; color: black; background-color: #f0ece8; }
th.eth {font: bold 15px tahoma, sans-serif; color: white; background-color: #440000; margin: 0; padding: 1px 4px; }
.row0 { background: #ffffff; color: #333333; }
.row1 { background: #f0ece8; color: #333333; }
h1, .h1 {font: bold 15px/17px tahoma, sans-serif; color: #660000; margin: 2em 0.3em 0; }
h2, .h2 {font: normal 15px tahoma, sans-serif; color: #660000;  margin: 1.4em 0.3em 0; }
h3, th.h3 {font: bold 13px tahoma, sans-serif; color: #660000; margin: 1em 0.3em 0; }
h4, .h4 {font: bold 13px tahoma, sans-serif; color: #660000;  margin: 0.7em 0.3em 0; }
hr.footerline {line-height: 1em; margin: 1em; padding: 2px; height: 2px; width: 95%; color: #440000; background-color: #840000; clear: both; border: none; align: center; }
.footer { font: normal 11px tahoma, sans-serif; }
--></style>
</head>\n<body>
<table width=100%>
<tr><th width='10%' align='left' class='eth'>Request No</th><td class='etd'>$this->request_id</td></tr>
<tr><th width='10%' align='left' class='eth'>Overview</th><td class='etd'>$this->brief</td></tr>
<tr><th width='10%' align='left' class='eth'>Type</th><td class='etd'>$this->request_type_desc</td></tr>
<tr><th width='10%' align='left' class='eth'>Importance</th><td class='etd'>$this->importance_desc</td></tr>
<tr><th width='10%' align='left' class='eth'>Urgency</th><td class='etd'>$this->urgency_desc</td></tr>
EOX
;

     if ( $this->chtype == "update" ) {
       $tbody .= "Request On:  $this->request_on\n";
       $hbody .= "<tr><th width='10%' align='left' class='eth'>Request On</th><td class='etd'>$this->request_on</td></tr>\n";
     }

     $tbody .= ucfirst($this->chtype) . "d by:  $session->fullname\n";
     $hbody .= "<tr><th width='10%' align='left' class='eth'>".ucfirst($this->chtype)."d by</th><td class='etd'>$session->fullname</td></tr>\n";

     if ( $requsr->user_no <> $session->user_no ) {
       $tbody .= ucfirst($this->chtype) . "d for: $this->fullname\n";
       $hbody .= "<tr><th width='10%' align='left' class='eth'>".ucfirst($this->chtype)."d for</th><td class='etd'>$this->fullname</td></tr>\n";
     }

     $tbody .= ucfirst($this->chtype) . "d on:  " . date( "D d M H:i:s Y" ) . "\n";
     $hbody .= "<tr><th width='10%' align='left' class='eth'>".ucfirst($this->chtype)."d on</th><td class='etd'>". date( "D d M H:i:s Y" ) ."</td></tr>\n";

     if ( isset($debug_email) ) {
       $tbody .= "Debug To:    $debug_to\n";
       $hbody .= "<tr><th width='10%' align='left' class='eth'>Debug To</th><td class='etd'>$debug_to</td></tr>\n";
     }
     $tbody .= "\n\n";
     $hbody .= "</table>\n";

     // Now add the information that was produced as a part of writing the record
     foreach ( $this->mail_message_data as $thing ) {
       $hbody .= $thing['html'];
       $tbody .= $thing['text'];
     }

     $hbody .= "<hr class='footerline'>\n<p class='footer'>Full details of the request, with all changes and notes, can be reviewed and changed at:<br />"
            . ' &nbsp; &nbsp; <a href="'.$GLOBALS['base_dns'].'/wr.php?request_id='.$this->request_id.'">'
            . $GLOBALS['base_dns'].'/wr.php?request_id='.$this->request_id.'</a><br /> <br /></p>';
     $tbody .= "\nFull details of the request, with all changes and notes, can be reviewed and changed at:\n"
             . "    <".$GLOBALS['base_dns']."/wr.php?request_id=".$this->request_id.">\n\n";

     $hbody .= "</body>\n</html>\n";
     // Actually assign the message parts from what we have built
     $mail->Body = $hbody;
     $mail->AltBody = $tbody;

     if ( !$mail->Send() ) {
       error_log( "$sysabbr: ERR: Unable to send e-mail for WR #$this->request_id" );
       error_log( "$sysabbr: ERR: $mail->ErrorInfo" );
     }
   }

   /////////////////////////////////////////////////////////////
   // Return an array of recipients for the e-mail
   /////////////////////////////////////////////////////////////
   function GetRecipients ()
   {
      $query = "SELECT email, fullname FROM usr, request_interested ";
      $query .= "WHERE request_interested.user_no = usr.user_no ";
      $query .=  " AND request_interested.request_id = {$this->request_id}";
      $query .=  " AND usr.status != 'I' ";
      $query .= "UNION ";
      $query .= "SELECT email, fullname FROM usr, request_allocated ";
      $query .= "WHERE request_allocated.allocated_to_id = usr.user_no ";
      $query .=  " AND request_allocated.request_id = {$this->request_id}";
      $query .=  " AND usr.status != 'I' ";

      $peopleq = new PgQuery($query);
      $peopleq->Exec("notify-eml");
      $to = array();

      while ( $row = $peopleq->Fetch() )
      {
        $to[$row->email] = $row->fullname;
      }
      return $to;
   }

   /////////////////////////////////////////////////////////////
   // Detect if stuff on the request record needs notification
   /////////////////////////////////////////////////////////////
   function DetectEmailChanges( ) {
     global $session, $client_messages, $sysabbr;

     $tfmt = " * %s\n";
     $hfmt = "<p>%s</p>\n";
     error_log( "$sysabbr: DBG: Detecting e-mail changes for '$this->chtype' change" );
     if ( $this->brief != "" && "$this->brief" != $_POST['brief'] ) {
       $this->mail_message_data[]['html'] = sprintf($hfmt, "New description: $_POST[brief]<br />(was: $this->brief)");
       $this->mail_message_data[]['text'] = sprintf($tfmt, "New description: $_POST[brief]\n   (was: $this->brief)");
       $this->send_an_email = true;
     }

     if ( isset($_POST['eta']) && "$this->eta" <> $_POST['eta'] )  {
       $msg = "New ETA:      $new_eta";
       if ( "$this->eta" != "" ) $msg .= "  (previous ETA was " . substr( nice_date($previous->eta), 7) . ")";
       $this->mail_message_data[]['html'] = sprintf($hfmt, $msg );
       $this->mail_message_data[]['text'] = sprintf($tfmt, $msg );
       $this->send_an_email = true;
     }

     $previous = simplify_string($_POST['detailed']);
     $current  = simplify_string($this->detailed);
     $detail_changed = ( $previous != $current );
     if ( $this->chtype == "update" && $detail_changed ) {
       $this->mail_message_data[]['text']
            = "Previous Description:\n"
            . "=====================\n"
            . stripslashes($this->detailed) . "\n\n";
       $this->mail_message_data[]['html']
            = "<h3>Previous Description</h3>\n<p>"
            . html_format(stripslashes($this->detailed)) . "</p>";
       $this->send_an_email = true;
     }

     if ( $this->chtype == "create" || ( $this->chtype == "change" && $detail_changed ) ) {
       $this->mail_message_data[]['text']
            = "Detailed Description:\n"
            . "=====================\n"
            . stripslashes($_POST['detailed']) . "\n\n";
       $this->mail_message_data[]['html']
            = "<h3>Detailed Description</h3>\n<p>"
            . html_format(htmlspecialchars(stripslashes($_POST['detailed']))) . "</p>\n";
       $this->send_an_email = true;
     }
     return $this->send_an_email;
   }


   /////////////////////////////////////////////////////////////
   // Attach a file to the W/R
   /////////////////////////////////////////////////////////////
   function AttachFile( $fname, $description ) {
     global $session, $client_messages;
     error_log( "$sysabbr Request::AttachFile: DBG: Adding attachment: " . $_FILES[$fname]['name'], 0);
     $sql = "SELECT nextval('request_attachment_attachment_id_seq') AS id ;";
     $qry = new PgQuery( $sql );
     if ( ! $qry->Exec('WR::AttachFile') ) {
       $client_messages[] = "$qry->errorstring";
       return false;
     }

     $row = $qry->Fetch();
     $attachment_id = $row->id;
     move_uploaded_file($_FILES[$fname]['tmp_name'], "attachments/$attachment_id");
     $att_name = tidy($_FILES[$fname]['name']);

     $file_type = guess_file_type( $att_name, "attachments/$attachment_id" );

     $sql = "INSERT INTO request_attachment ( attachment_id, request_id, attached_by, ";
     $sql .= "att_brief, att_description, att_filename, att_type ) ";
     $sql .= "VALUES( ?, ?, ?, ?, ?, ?, ? );";
     $qry = new PgQuery( $sql, $attachment_id, $this->request_id, $session->user_no,
                       $description, $description, $att_name, $file_type);
     if ( ! $qry->Exec('WR::AttachFile') ) {
       $client_messages[] = "$qry->errorstring";
       return false;
     }

     chmod( "attachments/$attachment_id", 0644 );
     $client_messages[] = "File attachment \"$att_name\" added to this request</h3>";
     $this->mail_message_data[]['html'] = "<h4>File attachment &quot;<a href=\"".$GLOBALS['base_dns']."/attachment.php/".htmlspecialchars($att_name)."?id=".$attachment_id."\">".htmlspecialchars($att_name)."</a>&quot; was added.</h4>\n";
     $this->mail_message_data[]['text'] = " * File attachment \"$att_name\" was added.\n";

     $this->send_an_email = true;

     return true;
   }

   /////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////
   function AddQuote( ) {
     global $session, $client_messages;
     error_log( "$sysabbr Request::AddQuote: DBG: Adding quote: " . $_POST['quote_brief'], 0);
     $sql = "SELECT nextval('request_quote_quote_id_seq') AS id ;";
     $qry = new PgQuery( $sql );
     if ( ! $qry->Exec('WR::AddQuote') ) {
       $client_messages[] = "$qry->errorstring";
       return false;
     }
     $row = $qry->Fetch();
     $id = $row->id;

     $sql = "INSERT INTO request_quote ( quote_id, request_id, quote_by_id, ";
     $sql .= "quote_brief, quote_details, quote_type, quote_amount, quote_units ) ";
     $sql .= "VALUES( ?, ?, ?, ?, ?, ?, ?, ? );";
     $qry = new PgQuery( $sql, $id, $this->request_id, $session->user_no,
                         $_POST['quote_brief'], $_POST['quote_details'], $_POST['quote_type'], $_POST['quote_amount'], $_POST['quote_units'] ) ;
     if ( ! $qry->Exec('WR::AddQuote') ) {
       $client_messages[] = "$qry->errorstring";
       return false;
     }
     $client_messages[] = "Quote added to this request";
     $this->mail_message_data[]['html'] = "<h4>A quote was added.</h4>\n";
     $this->mail_message_data[]['text'] = " * A quote was added.\n";

     $this->send_an_email = true;

     return true;
   }

   /////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////
   function AddWork( ) {
     global $session, $client_messages;
     error_log( "$sysabbr Request::AddWork: DBG: Adding work: " . $_POST['work_description'], 0);
     $sql = "SELECT nextval('request_timesheet_timesheet_id_seq') AS id ;";
     $qry = new PgQuery( $sql );
     if ( ! $qry->Exec('WR::AddWork') ) {
       $client_messages[] = "$qry->errorstring";
       return false;
     }
     $row = $qry->Fetch();
     $id = $row->id;
     $work_description = htmlspecialchars($_POST['work_description']);

     $sql = "INSERT INTO request_timesheet ( timesheet_id, request_id, work_by_id, ";
     $sql .= "work_on, work_quantity, work_units, work_rate, work_description ) ";
     $sql .= "VALUES( ?, ?, ?, ?, ?, ?, ?, ? );";
     $qry = new PgQuery( $sql, $id, $this->request_id, $session->user_no,
                         $_POST['work_on'], $_POST['work_quantity'], $_POST['work_units'], $_POST['work_rate'], $work_description ) ;
     if ( ! $qry->Exec('WR::AddWork') ) {
       $client_messages[] = "$qry->errorstring";
       return false;
     }
     $client_messages[] = "Timesheet added to this request";

     return true;
   }

   /////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////
   function AddParent( ) {
     global $session, $client_messages;

     if ( $_POST['link_type'] == '' ) return true;  // Silently carry on...
     error_log( "$sysabbr Request::AddParent: DBG: Adding parent: " . $_POST['parent_request_id'], 0);

     $sql = "INSERT INTO request_request ( request_id, to_request_id, link_type, link_data ) ";
     $sql .= "VALUES( ?, ?, ?, ? );";
     $qry = new PgQuery( $sql, $_POST['parent_request_id'], $this->request_id, $_POST['link_type'], $_POST['link_data'] ) ;
     if ( ! $qry->Exec('WR::AddParent') ) {
       $client_messages[] = "$qry->errorstring";
       return false;
     }
     $client_messages[] = "W/R linked to this request";
     $this->mail_message_data[]['html'] = "<h4><a href='".$GLOBALS['base_dns']."/wr.php?request_id=".$_POST['parent_request_id']."'>W/R " . $_POST['parent_request_id'] . "</a> was linked to this request</h4>\n";
     $this->mail_message_data[]['text'] = " * W/R " . $_POST['parent_request_id'] . " was linked to this request.\n";

     $this->send_an_email = true;

     return true;
   }

   /////////////////////////////////////////////////////////////
   // Write the new allocations for the W/R
   /////////////////////////////////////////////////////////////
   function NewAllocations( ) {
     global $session, $client_messages;
     error_log( "$sysabbr Request::NewAllocations: DBG: Adding allocations: " . join(",", $_POST['new_allocations']), 0);

     $new_allocations = preg_replace( "/[^0-9,]/", "", join(",", $_POST['new_allocations']));
     $sql = "INSERT INTO request_allocated ( request_id, allocated_on, allocated_to_id ) ";
     $sql .= "SELECT $this->request_id, current_timestamp, user_no ";
     $sql .= "FROM usr WHERE user_no IN ( $new_allocations ) ";
     $sql .= "AND NOT EXISTS( SELECT 1 FROM request_allocated WHERE request_id = $this->request_id ";
     $sql .=                  "AND request_allocated.allocated_to_id = usr.user_no) ";
     $sql .= "AND usr.org_code IN ( $this->org_code, $session->org_code ); ";
     $qry = new PgQuery($sql);
     if ( ! $qry->Exec('WR::NewAllocations') ) {
       $client_messages[] = "$qry->errorstring";
       return false;
     }
     $client_messages[] = sprintf("Request allocated to %d people.", count($_POST['new_allocations']));
     $this->mail_message_data[]['html'] = "<h4>The request was allocated to " . count($_POST['new_allocations']) . " people.</h4>\n";
     $this->mail_message_data[]['text'] = " * The request was allocated to " . count($_POST['new_allocations']) . " people.\n";


     $this->send_an_email = true;

     return true;
   }

   /////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////
   function NewSubscriptions( ) {
     global $sysabbr, $session, $client_messages;

     if ( $this->chtype = 'create' ) {
       $subscribers = array_merge( array( $_POST['requester_id'], $session->user_no  ), $_POST['new_allocations'] );
     }
     else {
       $subscribers = $_POST['new_allocations'];
     }

     $new_subscriptions = preg_replace( "/[^0-9,]/", "", join(",", $subscribers));
     error_log( "$sysabbr Request::NewSubscriptions: DBG: Adding subscriptions: $new_subscriptions", 0);

     $sql = "INSERT INTO request_interested ( request_id, user_no, username ) ";
     $sql .= "SELECT $this->request_id, user_no, username ";
     $sql .= "FROM usr WHERE user_no IN ( $new_subscriptions ) ";
     $sql .= "AND NOT EXISTS( SELECT 1 FROM request_interested WHERE request_id = $this->request_id ";
     $sql .=                  "AND request_interested.user_no = usr.user_no) ";
     $sql .= "AND usr.org_code IN ( $this->org_code, $session->org_code ); ";
     if ( $this->chtype = 'create' ) {
       $sql .= "INSERT INTO request_interested ( request_id, user_no, username ) ";
       $sql .= "SELECT $this->request_id, u.user_no, username ";
       $sql .= "FROM system_usr s ";
       $sql .= "JOIN usr u ON s.user_no = u.user_no ";
       $sql .= "WHERE s.system_code = '$this->system_code' AND s.role IN ( 'A', 'S', 'C' ) ";
       $sql .= "AND NOT EXISTS( SELECT 1 FROM request_interested WHERE request_id = $this->request_id ";
       $sql .=                  "AND request_interested.user_no = u.user_no) ";
       $sql .= "AND u.org_code IN ( $this->org_code, $session->org_code ); ";
     }
     $qry = new PgQuery($sql);
     if ( ! $qry->Exec('WR::NewSubscriptions') ) {
       $client_messages[] = "$qry->errorstring";
       return false;
     }
     $client_messages[] = sprintf("Request subscribers added.");

     return true;
   }

   /////////////////////////////////////////////////////////////
   // Write the new tags to the W/R
   /////////////////////////////////////////////////////////////
   function NewTags( ) {
     global $session, $client_messages;
     error_log( "$sysabbr Request::NewTags: DBG: Adding tags: " . join(",", $_POST['new_tags']), 0);

     $new_tags = preg_replace( "/[^0-9,]/", "", join(",", $_POST['new_tags']));
     $sql = "INSERT INTO request_tag ( tag_id, request_id, tagged_on ) ";
     $sql .= "SELECT tag_id, $this->request_id, current_timestamp ";
     $sql .= "FROM organisation_tag WHERE tag_id IN ( $new_tags ) ";
     $sql .= "AND NOT EXISTS( SELECT 1 FROM request_tag WHERE request_id = $this->request_id ";
     $sql .=                  "AND request_tag.tag_id = organisation_tag.tag_id) ";
     $sql .= "AND organisation_tag.org_code IN ( $this->org_code, $session->org_code ); ";
     $qry = new PgQuery($sql);
     if ( ! $qry->Exec('WR::NewTags') ) {
       $client_messages[] = "$qry->errorstring";
       return false;
     }
     $client_messages[] = sprintf("Request tagged.", count($_POST['new_tags']));

     return true;
   }

   /////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////
   function NewStatusCode( ) {
     global $session, $client_messages;
     error_log( "$sysabbr Request::NewStatusCode: DBG: Status changed from '$this->last_status' to '" . $_POST['status_code']."'", 0);

     $sql = "INSERT INTO request_status ( request_id, status_on, status_by_id, status_code ) ";
     $sql .= "VALUES( ?, current_timestamp, ?, ? );";
     $qry = new PgQuery( $sql, $this->request_id, $session->user_no, $_POST['status_code'] ) ;
     if ( ! $qry->Exec('WR::NewStatusCode') ) {
       $client_messages[] = "$qry->errorstring";
       return false;
     }
     $client_messages[] = "Status changed from '$this->last_status' to '".$_POST['status_code']."'";
     $this->mail_message_data[]['html'] = "<h4>The status was changed from &quot;{$this->last_status}&quot; to &quot;" . $_POST['status_code'] . "&quot;</h4>\n";
     $this->mail_message_data[]['text'] = " * The status was changed from \"{$this->last_status}\" to \"" . $_POST['status_code'] . "\"\n";

     $_POST['last_status'] = $_POST['status_code'];

     $this->send_an_email = true;

     return true;
   }

   /////////////////////////////////////////////////////////////
   /////////////////////////////////////////////////////////////
   function AddNote( ) {
     global $session, $client_messages;
     error_log( "$sysabbr Request::AddNote: DBG: Note added to request", 0);

     $note_detail = $_POST['note_detail'];
     if ( ! isset($_POST['preserve_html']) || $_POST['preserve_html'] == '' ) {
       $note_detail = htmlspecialchars($note_detail);
     }

     $sql = "INSERT INTO request_note ( request_id, note_on, note_by_id, note_detail ) ";
     $sql .= "VALUES( ?, current_timestamp, ?, ? );";
     $qry = new PgQuery( $sql, $this->request_id, $session->user_no, $note_detail ) ;
     if ( ! $qry->Exec('WR::NewStatusCode') ) {
       $client_messages[] = "$qry->errorstring";
       return false;
     }
     $client_messages[] = "Note added to request";
     $this->mail_message_data[]['html'] = "<h3>$session->fullname noted:</h3><p>".html_format($note_detail)."</p>\n";
     $this->mail_message_data[]['text'] = "$session->fullname noted that:\n$note_detail\n";

     $this->send_an_email = true;

     return true;
   }

}

?>